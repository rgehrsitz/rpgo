<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<title>FERS Retirement Planning Analysis</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js"></script>
<style>
body { font-family: Arial, sans-serif; margin:0; padding:20px; background:#f8f9fa; }
header { background:#2c3e50; color:#fff; padding:20px; border-radius:8px; }
section { background:#fff; padding:16px 20px; margin:20px 0; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,.08); }
h1 { margin:0 0 4px 0; font-weight:400; }
.table { width:100%; border-collapse:collapse; }
.table th, .table td { padding:6px 8px; text-align:right; }
.table th:first-child, .table td:first-child { text-align:left; }
.table thead { background:#e5eef5; }
.badge { display:inline-block; background:#3498db; color:#fff; padding:2px 6px; border-radius:4px; font-size:12px; }
.chart-container { position: relative; height: 400px; margin: 20px 0; }
.chart-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0; }
@media (max-width: 768px) {
  .chart-grid { grid-template-columns: 1fr; }
}

/* Enhanced HTML Report Styles */
.tabs { display: flex; border-bottom: 2px solid #e5eef5; margin-bottom: 20px; }
.tab { padding: 12px 20px; cursor: pointer; border-bottom: 2px solid transparent; transition: all 0.3s; }
.tab.active { border-bottom-color: #3498db; background: #f8f9fa; }
.tab:hover { background: #f8f9fa; }
.tab-content { display: none; }
.tab-content.active { display: block; }

.drilldown-table { margin-top: 20px; }
.drilldown-table th { background: #2c3e50; color: white; }
.drilldown-table tr:hover { background: #f8f9fa; }

.chart-controls { margin-bottom: 15px; display: flex; gap: 10px; align-items: center; flex-wrap: wrap; }
.chart-controls button { padding: 8px 16px; border: 1px solid #3498db; background: white; color: #3498db; border-radius: 4px; cursor: pointer; transition: all 0.3s; }
.chart-controls button:hover { background: #3498db; color: white; }
.chart-controls button.active { background: #3498db; color: white; }

.metric-card { background: #f8f9fa; border: 1px solid #e5eef5; border-radius: 8px; padding: 15px; margin: 10px 0; }
.metric-card h4 { margin: 0 0 10px 0; color: #2c3e50; }
.metric-value { font-size: 24px; font-weight: bold; color: #27ae60; }
.metric-change { font-size: 14px; margin-top: 5px; }
.metric-change.positive { color: #27ae60; }
.metric-change.negative { color: #e74c3c; }

.comparison-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }

.export-controls { text-align: right; margin-bottom: 20px; }
.export-controls button { margin-left: 10px; }

.mobile-optimized { display: block; }
@media (max-width: 768px) {
  .mobile-optimized { display: none; }
  .chart-grid { grid-template-columns: 1fr; }
  .comparison-grid { grid-template-columns: 1fr; }
  .tabs { flex-wrap: wrap; }
  .tab { flex: 1; min-width: 120px; text-align: center; }
  .chart-controls { justify-content: center; }
  .export-controls { text-align: center; }
}

/* Chart interaction styles */
.chart-container { cursor: pointer; }
.chart-container:hover { box-shadow: 0 4px 8px rgba(0,0,0,.15); }
</style>
</head>
<body>
<header>
  <h1>FERS Retirement Planning Analysis</h1>
  <div class="subtitle">Scenarios Evaluated: {{len .Scenarios}}</div>
</header>
{{if .Assumptions}}
<section>
  <h2>Key Assumptions</h2>
  <ul>
  {{range .Assumptions}}
    <li>{{.}}</li>
  {{end}}
  </ul>
</section>
{{end}}
<section>
  <h2>Scenario Summary</h2>
  <table class="table">
    <thead><tr><th>Scenario</th><th>First Year Net</th><th>Year 5</th><th>Year 10</th><th>Total Lifetime Income</th><th>Success Rate</th><th>TSP Longevity</th><th>Final TSP Balance</th></tr></thead>
    <tbody>
      {{range .Scenarios}}
      <tr>
        <td>{{.Name}}</td>
        <td>{{curr .FirstYearNetIncome}}</td>
        <td>{{curr .Year5NetIncome}}</td>
        <td>{{curr .Year10NetIncome}}</td>
        <td>{{curr .TotalLifetimeIncome}}</td>
        <td>{{pct .SuccessRate}}</td>
        <td>{{.TSPLongevity}}</td>
        <td>{{curr .FinalTSPBalance}}</td>
      </tr>
      {{end}}
    </tbody>
  </table>
</section>

<!-- Enhanced Comparison Views -->
<section>
  <h2>Enhanced Scenario Comparison</h2>
  <div class="tabs">
    <div class="tab active" onclick="showTab('overview')">Overview</div>
    <div class="tab" onclick="showTab('metrics')">Key Metrics</div>
    <div class="tab" onclick="showTab('timeline')">Timeline View</div>
    <div class="tab" onclick="showTab('risks')">Risk Analysis</div>
  </div>
  
  <div id="overview" class="tab-content active">
    <div class="comparison-grid">
      {{range $index, $scenario := .Scenarios}}
      <div class="metric-card">
        <h4>{{$scenario.Name}}</h4>
        <div class="metric-value">{{curr $scenario.TotalLifetimeIncome}}</div>
        <div class="metric-change">Total Lifetime Income</div>
        <div style="margin-top: 10px;">
          <div><strong>Year 5:</strong> {{curr $scenario.Year5NetIncome}}</div>
          <div><strong>Year 10:</strong> {{curr $scenario.Year10NetIncome}}</div>
          <div><strong>TSP Longevity:</strong> {{$scenario.TSPLongevity}} years</div>
          <div><strong>Success Rate:</strong> {{pct $scenario.SuccessRate}}</div>
        </div>
      </div>
      {{end}}
    </div>
  </div>
  
  <div id="metrics" class="tab-content">
    <div class="chart-controls">
      <button class="active" onclick="showMetricChart('income')">Income Comparison</button>
      <button onclick="showMetricChart('tsp')">TSP Balance</button>
      <button onclick="showMetricChart('taxes')">Tax Analysis</button>
      <button onclick="showMetricChart('irmaa')">IRMAA Risk</button>
    </div>
    <div class="chart-container">
      <canvas id="metricsChart"></canvas>
    </div>
  </div>
  
  <div id="timeline" class="tab-content">
    <div class="chart-controls">
      <button class="active" onclick="showTimelineView('income')">Net Income Timeline</button>
      <button onclick="showTimelineView('sources')">Income Sources</button>
      <button onclick="showTimelineView('expenses')">Expense Breakdown</button>
    </div>
    <div class="chart-container">
      <canvas id="timelineChart"></canvas>
    </div>
  </div>
  
  <div id="risks" class="tab-content">
    <div class="comparison-grid">
      {{range $index, $scenario := .Scenarios}}
      <div class="metric-card">
        <h4>{{$scenario.Name}} - Risk Profile</h4>
        {{if $scenario.IRMAAAnalysis}}
        <div style="margin-bottom: 15px;">
          <div><strong>IRMAA Breaches:</strong> {{len $scenario.IRMAAAnalysis.YearsWithBreaches}} years</div>
          <div><strong>Total IRMAA Cost:</strong> {{curr $scenario.IRMAAAnalysis.TotalIRMAACost}}</div>
          <div><strong>Risk Level:</strong> 
            {{if gt (len $scenario.IRMAAAnalysis.YearsWithBreaches) 5}}
              <span style="color: #e74c3c; font-weight: bold;">HIGH</span>
            {{else if gt (len $scenario.IRMAAAnalysis.YearsWithBreaches) 2}}
              <span style="color: #f39c12; font-weight: bold;">MEDIUM</span>
            {{else}}
              <span style="color: #27ae60; font-weight: bold;">LOW</span>
            {{end}}
          </div>
        </div>
        {{end}}
        <div>
          <div><strong>TSP Depletion Risk:</strong> 
            {{if lt $scenario.TSPLongevity 20}}
              <span style="color: #e74c3c;">High ({{$scenario.TSPLongevity}} years)</span>
            {{else if lt $scenario.TSPLongevity 30}}
              <span style="color: #f39c12;">Medium ({{$scenario.TSPLongevity}} years)</span>
            {{else}}
              <span style="color: #27ae60;">Low ({{$scenario.TSPLongevity}} years)</span>
            {{end}}
          </div>
          <div><strong>Success Rate:</strong> {{pct $scenario.SuccessRate}}</div>
        </div>
      </div>
      {{end}}
    </div>
  </div>
</section>

<section>
  <h2>Calendar Year Comparison (Apples-to-Apples)</h2>
  <table class="table">
    <thead><tr><th>Scenario</th><th>2030 Net Income</th><th>2035 Net Income</th><th>2040 Net Income</th></tr></thead>
    <tbody>
      <tr style="background-color: #f8f9fa; font-weight: bold;">
        <td>Pre-Retirement Baseline (with COLA growth)</td>
        <td>{{curr (index .Scenarios 0).PreRetirementNet2030}}</td>
        <td>{{curr (index .Scenarios 0).PreRetirementNet2035}}</td>
        <td>{{curr (index .Scenarios 0).PreRetirementNet2040}}</td>
      </tr>
      {{range .Scenarios}}
      <tr>
        <td>{{.Name}}</td>
        <td>{{curr .NetIncome2030}}</td>
        <td>{{curr .NetIncome2035}}</td>
        <td>{{curr .NetIncome2040}}</td>
      </tr>
      {{end}}
    </tbody>
  </table>
  <p style="font-size: 0.9em; color: #666; margin-top: 10px;">
    <strong>Note:</strong> This table shows net income for specific calendar years across all scenarios, enabling direct comparison. 
    The baseline shows what your current income would be in those years with COLA (cost-of-living) adjustments.
  </p>
</section>

<section>
  <h2>Interactive Visual Analysis</h2>
  <div class="export-controls">
    <button onclick="exportChart('tspChart')">Export TSP Chart</button>
    <button onclick="exportChart('incomeChart')">Export Income Chart</button>
    <button onclick="exportAllCharts()">Export All Charts</button>
    <button onclick="exportData()">Export Data (CSV)</button>
  </div>
  
  <div class="chart-grid">
    <div>
      <h3>TSP Balance Over Time</h3>
      <div class="chart-container" onclick="showDrilldown('tsp')">
        <canvas id="tspChart"></canvas>
      </div>
      <div id="tspDrilldown" class="drilldown-table" style="display: none;">
        <h4>TSP Balance Details</h4>
        <table class="table">
          <thead>
            <tr><th>Year</th><th>Scenario 1</th><th>Scenario 2</th><th>Scenario 3</th></tr>
          </thead>
          <tbody id="tspDrilldownBody">
          </tbody>
        </table>
      </div>
    </div>
    <div>
      <h3>Net Income Comparison</h3>
      <div class="chart-container" onclick="showDrilldown('income')">
        <canvas id="incomeChart"></canvas>
      </div>
      <div id="incomeDrilldown" class="drilldown-table" style="display: none;">
        <h4>Net Income Details</h4>
        <table class="table">
          <thead>
            <tr><th>Year</th><th>Scenario 1</th><th>Scenario 2</th><th>Scenario 3</th></tr>
          </thead>
          <tbody id="incomeDrilldownBody">
          </tbody>
        </table>
      </div>
    </div>
  </div>
  
  <div class="chart-grid">
    <div>
      <h3>Income Sources Over Time - Scenario 1</h3>
      <div class="chart-container">
        <canvas id="incomeSourcesChart1"></canvas>
      </div>
    </div>
    {{if gt (len .Scenarios) 1}}
    <div>
      <h3>Income Sources Over Time - Scenario 2</h3>
      <div class="chart-container">
        <canvas id="incomeSourcesChart2"></canvas>
      </div>
    </div>
    {{end}}
  </div>
  
  {{if gt (len .Scenarios) 2}}
  <div class="chart-grid">
    {{range $index, $scenario := slice .Scenarios 2}}
    <div>
      <h3>Income Sources Over Time - Scenario {{addInt $index 3}}</h3>
      <div class="chart-container">
        <canvas id="incomeSourcesChart{{addInt $index 3}}"></canvas>
      </div>
    </div>
    {{end}}
  </div>
  {{end}}
</section>
<section>
  <h2>Recommendation</h2>
  {{with $.Recommendation}}
    {{if .ScenarioName}}
      <p>Best Scenario: <strong>{{.ScenarioName}}</strong> <span class="badge">Δ {{curr .NetIncomeChange}} ({{pct .PercentageChange}})</span></p>
    {{else}}
      <p>No recommendation available.</p>
    {{end}}
  {{end}}
</section>

{{range .Scenarios}}
  {{if .IRMAAAnalysis}}
  <section>
    <h2>IRMAA Risk Analysis - {{.Name}}</h2>
    <p style="font-size: 0.9em; color: #666;">
      IRMAA (Income-Related Monthly Adjustment Amount) surcharges apply to Medicare Part B premiums when Modified Adjusted Gross Income (MAGI) exceeds certain thresholds.
    </p>

    {{with .IRMAAAnalysis}}
      {{if gt (len .YearsWithBreaches) 0}}
        <div style="background: #fff3cd; border-left: 4px solid #856404; padding: 12px; margin: 16px 0;">
          <strong>⚠️ IRMAA BREACHES DETECTED</strong>
          <ul style="margin: 8px 0 0 0;">
            <li>Years with breaches: <strong>{{len .YearsWithBreaches}}</strong></li>
            {{if gt .FirstBreachYear 0}}
              <li>First breach year: <strong>{{.FirstBreachYear}}</strong></li>
            {{end}}
            <li>Total IRMAA cost: <strong>{{curr .TotalIRMAACost}}</strong></li>
          </ul>
        </div>
      {{else if gt (len .YearsWithWarnings) 0}}
        <div style="background: #fff3cd; border-left: 4px solid #856404; padding: 12px; margin: 16px 0;">
          <strong>⚠️ IRMAA WARNINGS (Close to Thresholds)</strong>
          <ul style="margin: 8px 0 0 0;">
            <li>Years within $10K of threshold: <strong>{{len .YearsWithWarnings}}</strong></li>
          </ul>
        </div>
      {{else}}
        <div style="background: #d4edda; border-left: 4px solid #155724; padding: 12px; margin: 16px 0;">
          <strong>✓ NO IRMAA CONCERNS</strong>
          <p style="margin: 4px 0 0 0;">MAGI remains comfortably below Medicare premium thresholds</p>
        </div>
      {{end}}

      {{if gt (len .HighRiskYears) 0}}
        <h3>High Risk Years</h3>
        <table class="table">
          <thead>
            <tr>
              <th>Year</th>
              <th>MAGI</th>
              <th>Status</th>
              <th>Tier</th>
              <th>Annual Cost</th>
            </tr>
          </thead>
          <tbody>
            {{range .HighRiskYears}}
            <tr>
              <td>{{.Year}}</td>
              <td>{{curr .MAGI}}</td>
              <td>
                {{if eq .RiskStatus "Breach"}}
                  <span style="color: #d9534f;">✗ Breach</span>
                {{else if eq .RiskStatus "Warning"}}
                  <span style="color: #f0ad4e;">⚠ Warning</span>
                {{else}}
                  <span style="color: #5cb85c;">✓ Safe</span>
                {{end}}
              </td>
              <td>{{.TierLevel}}</td>
              <td>{{curr .AnnualCost}}</td>
            </tr>
            {{end}}
          </tbody>
        </table>
      {{end}}

      {{if gt (len .Recommendations) 0}}
        <h3>Recommendations</h3>
        <ul>
          {{range .Recommendations}}
            <li>{{.}}</li>
          {{end}}
        </ul>
      {{end}}
    {{end}}
  </section>
  {{end}}

  {{if hasWithdrawalSequencing .}}
  <section>
    <h2>Withdrawal Sequencing Analysis - {{.Name}}</h2>
    <p style="font-size: 0.9em; color: #666;">
      This analysis shows how withdrawals are sequenced across different account types (Taxable, Traditional TSP, Roth TSP) to optimize for taxes and IRMAA.
    </p>

    {{$withdrawalYears := getWithdrawalYears .}}
    {{if gt (len $withdrawalYears) 0}}
      <h3>Withdrawal Source Breakdown</h3>
      <table class="table">
        <thead>
          <tr>
            <th>Year</th>
            <th>Taxable Account</th>
            <th>Traditional TSP</th>
            <th>Roth TSP</th>
            <th>Total Withdrawals</th>
          </tr>
        </thead>
        <tbody>
          {{range $withdrawalYears}}
            <tr>
              <td>{{.Year}}</td>
              <td>{{curr .WithdrawalTaxable}}</td>
              <td>{{curr .WithdrawalTraditional}}</td>
              <td>{{curr .WithdrawalRoth}}</td>
              <td>{{curr (add (add .WithdrawalTaxable .WithdrawalTraditional) .WithdrawalRoth)}}</td>
            </tr>
          {{end}}
        </tbody>
      </table>

      <h3>Strategy Analysis</h3>
      {{$strategy := analyzeWithdrawalStrategy $withdrawalYears}}
      <div style="background: #e8f4fd; border-left: 4px solid #3498db; padding: 12px; margin: 16px 0;">
        <strong>Detected Strategy: {{$strategy}}</strong>
        <p style="margin: 4px 0 0 0;">
          {{if eq $strategy "Taxable-first (Standard)"}}
            Withdrawals prioritize taxable accounts first, preserving tax-advantaged accounts for later years. This strategy minimizes early tax burden but may increase taxes in later years.
          {{else if eq $strategy "Roth-first (Tax Efficient)"}}
            Withdrawals prioritize Roth accounts first to minimize taxable income and reduce IRMAA exposure. This strategy optimizes for current tax efficiency.
          {{else if eq $strategy "Traditional-first"}}
            Withdrawals prioritize Traditional TSP accounts first. This strategy may be used to fill lower tax brackets or manage RMD requirements.
          {{else}}
            Mixed withdrawal strategy using multiple account types based on tax optimization and account availability.
          {{end}}
        </p>
      </div>
    {{else}}
      <div style="background: #f8f9fa; border-left: 4px solid #6c757d; padding: 12px; margin: 16px 0;">
        <strong>No Withdrawal Sequencing Data</strong>
        <p style="margin: 4px 0 0 0;">This scenario does not use withdrawal sequencing strategies.</p>
      </div>
    {{end}}
  </section>
  {{end}}
{{end}}

<script>
// Chart data extracted from scenarios
const scenarioData = [
{{- range $scenarioIndex, $scenario := .Scenarios}}
  {
    name: {{$scenario.Name | printf "%q"}},
    years: [{{range $scenario.Projection}}{{.Date.Year}},{{end}}],
    tspBalances: [{{range $scenario.Projection}}{{printf "%.0f" (.TotalTSPBalance).InexactFloat64}},{{end}}],
    netIncomes: [{{range $scenario.Projection}}{{printf "%.0f" .NetIncome.InexactFloat64}},{{end}}],
    salaries: [{{range $scenario.Projection}}{{printf "%.0f" (.GetTotalSalary).InexactFloat64}},{{end}}],
    pensions: [{{range $scenario.Projection}}{{printf "%.0f" (.GetTotalPension).InexactFloat64}},{{end}}],
    tspWithdrawals: [{{range $scenario.Projection}}{{printf "%.0f" (.GetTotalTSPWithdrawal).InexactFloat64}},{{end}}],
    socialSecurity: [{{range $scenario.Projection}}{{printf "%.0f" (.GetTotalSSBenefit).InexactFloat64}},{{end}}]
  }{{if ne $scenarioIndex (len $.Scenarios | minus1)}},{{end}}
{{- end}}
];

const colors = ['#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6'];
const sourceColors = {
  salary: '#3498db',
  pension: '#2ecc71', 
  tspWithdrawal: '#f39c12',
  socialSecurity: '#9b59b6'
};

// TSP Balance Chart - Fixed x-axis scaling
const tspCtx = document.getElementById('tspChart').getContext('2d');
new Chart(tspCtx, {
  type: 'line',
  data: {
    datasets: scenarioData.map((scenario, index) => ({
      label: scenario.name,
      data: scenario.years.map((year, i) => ({ x: parseInt(year), y: parseFloat(scenario.tspBalances[i]) })),
      borderColor: colors[index % colors.length],
      backgroundColor: colors[index % colors.length] + '20',
      fill: false,
      tension: 0.1
    }))
  },
  options: {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      title: { display: true, text: 'TSP Balance Over Time' }
    },
    scales: {
      x: { 
        type: 'linear',
        position: 'bottom',
        title: { display: true, text: 'Year' },
        min: Math.min(...scenarioData.flatMap(s => s.years)) - 1,
        max: Math.max(...scenarioData.flatMap(s => s.years)) + 1,
        ticks: {
          stepSize: 5,
          callback: value => Math.round(value)
        }
      },
      y: { 
        title: { display: true, text: 'TSP Balance ($)' },
        ticks: { callback: value => '$' + Math.round(value).toLocaleString() }
      }
    }
  }
});

// Net Income Chart - Fixed x-axis scaling
const incomeCtx = document.getElementById('incomeChart').getContext('2d');
new Chart(incomeCtx, {
  type: 'line',
  data: {
    datasets: scenarioData.map((scenario, index) => ({
      label: scenario.name,
      data: scenario.years.map((year, i) => ({ x: parseInt(year), y: parseFloat(scenario.netIncomes[i]) })),
      borderColor: colors[index % colors.length],
      backgroundColor: colors[index % colors.length] + '20',
      fill: false,
      tension: 0.1
    }))
  },
  options: {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      title: { display: true, text: 'Net Income Over Time' }
    },
    scales: {
      x: { 
        type: 'linear',
        position: 'bottom',
        title: { display: true, text: 'Year' },
        min: Math.min(...scenarioData.flatMap(s => s.years)) - 1,
        max: Math.max(...scenarioData.flatMap(s => s.years)) + 1,
        ticks: {
          stepSize: 5,
          callback: value => Math.round(value)
        }
      },
      y: { 
        title: { display: true, text: 'Net Income ($)' },
        ticks: { callback: value => '$' + Math.round(value).toLocaleString() }
      }
    }
  }
});

// Income Sources Over Time Charts - One for each scenario
scenarioData.forEach((scenario, scenarioIndex) => {
  const chartId = `incomeSourcesChart${scenarioIndex + 1}`;
  const ctx = document.getElementById(chartId);
  if (ctx) {
    const yearNumbers = scenario.years.map(year => parseInt(year));
    new Chart(ctx, {
      type: 'line',
      data: {
        datasets: [
          {
            label: 'Salary',
            data: yearNumbers.map((year, i) => ({ x: year, y: parseFloat(scenario.salaries[i]) })),
            backgroundColor: sourceColors.salary + '80',
            borderColor: sourceColors.salary,
            fill: 'origin'
          },
          {
            label: 'FERS Pension',
            data: yearNumbers.map((year, i) => ({ x: year, y: parseFloat(scenario.pensions[i]) })),
            backgroundColor: sourceColors.pension + '80',
            borderColor: sourceColors.pension,
            fill: '-1'
          },
          {
            label: 'TSP Withdrawal',
            data: yearNumbers.map((year, i) => ({ x: year, y: parseFloat(scenario.tspWithdrawals[i]) })),
            backgroundColor: sourceColors.tspWithdrawal + '80', 
            borderColor: sourceColors.tspWithdrawal,
            fill: '-1'
          },
          {
            label: 'Social Security',
            data: yearNumbers.map((year, i) => ({ x: year, y: parseFloat(scenario.socialSecurity[i]) })),
            backgroundColor: sourceColors.socialSecurity + '80',
            borderColor: sourceColors.socialSecurity,
            fill: '-1'
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          title: { display: true, text: scenario.name + ' - Income Sources Over Time' }
        },
        scales: {
          x: { 
            type: 'linear',
            position: 'bottom',
            title: { display: true, text: 'Year' },
            min: Math.min(...yearNumbers) - 1,
            max: Math.max(...yearNumbers) + 1,
            ticks: {
              stepSize: 5,
              callback: value => Math.round(value)
            }
          },
          y: { 
            title: { display: true, text: 'Annual Income ($)' },
            stacked: true,
            ticks: { callback: value => '$' + Math.round(value).toLocaleString() }
          }
        },
        interaction: {
          mode: 'index',
          intersect: false
        }
      }
    });
  }
});

// Enhanced HTML Report JavaScript Functions

// Tab functionality
function showTab(tabName) {
  // Hide all tab contents
  document.querySelectorAll('.tab-content').forEach(content => {
    content.classList.remove('active');
  });
  
  // Remove active class from all tabs
  document.querySelectorAll('.tab').forEach(tab => {
    tab.classList.remove('active');
  });
  
  // Show selected tab content
  document.getElementById(tabName).classList.add('active');
  
  // Add active class to clicked tab
  event.target.classList.add('active');
}

// Chart controls functionality
function showMetricChart(type) {
  // Remove active class from all buttons
  document.querySelectorAll('#metrics .chart-controls button').forEach(btn => {
    btn.classList.remove('active');
  });
  
  // Add active class to clicked button
  event.target.classList.add('active');
  
  // Update chart based on type
  updateMetricsChart(type);
}

function showTimelineView(type) {
  // Remove active class from all buttons
  document.querySelectorAll('#timeline .chart-controls button').forEach(btn => {
    btn.classList.remove('active');
  });
  
  // Add active class to clicked button
  event.target.classList.add('active');
  
  // Update chart based on type
  updateTimelineChart(type);
}

// Drill-down functionality
function showDrilldown(type) {
  const drilldownId = type + 'Drilldown';
  const drilldown = document.getElementById(drilldownId);
  
  if (drilldown.style.display === 'none') {
    drilldown.style.display = 'block';
    populateDrilldownTable(type);
  } else {
    drilldown.style.display = 'none';
  }
}

function populateDrilldownTable(type) {
  const bodyId = type + 'DrilldownBody';
  const tbody = document.getElementById(bodyId);
  tbody.innerHTML = '';
  
  // Get data from scenarioData
  const maxYears = Math.max(...scenarioData.map(s => s.years.length));
  
  for (let i = 0; i < maxYears; i++) {
    const row = document.createElement('tr');
    
    // Year column
    const yearCell = document.createElement('td');
    yearCell.textContent = scenarioData[0].years[i] || '';
    row.appendChild(yearCell);
    
    // Data columns for each scenario
    scenarioData.forEach(scenario => {
      const cell = document.createElement('td');
      if (type === 'tsp') {
        cell.textContent = scenario.tspBalances[i] ? '$' + Math.round(parseFloat(scenario.tspBalances[i])).toLocaleString() : '';
      } else if (type === 'income') {
        cell.textContent = scenario.netIncomes[i] ? '$' + Math.round(parseFloat(scenario.netIncomes[i])).toLocaleString() : '';
      }
      row.appendChild(cell);
    });
    
    tbody.appendChild(row);
  }
}

// Chart update functions
function updateMetricsChart(type) {
  // This would update the metrics chart based on the selected type
  // For now, we'll just log the type
  console.log('Updating metrics chart for type:', type);
}

function updateTimelineChart(type) {
  // This would update the timeline chart based on the selected type
  // For now, we'll just log the type
  console.log('Updating timeline chart for type:', type);
}

// Export functionality
function exportChart(chartId) {
  const canvas = document.getElementById(chartId);
  const link = document.createElement('a');
  link.download = chartId + '.png';
  link.href = canvas.toDataURL();
  link.click();
}

function exportAllCharts() {
  const chartIds = ['tspChart', 'incomeChart'];
  chartIds.forEach(id => {
    const canvas = document.getElementById(id);
    if (canvas) {
      const link = document.createElement('a');
      link.download = id + '.png';
      link.href = canvas.toDataURL();
      link.click();
    }
  });
}

function exportData() {
  // Create CSV data
  let csvContent = 'Year,Scenario,TSP Balance,Net Income\n';
  
  const maxYears = Math.max(...scenarioData.map(s => s.years.length));
  
  for (let i = 0; i < maxYears; i++) {
    scenarioData.forEach(scenario => {
      const year = scenario.years[i] || '';
      const tspBalance = scenario.tspBalances[i] || '0';
      const netIncome = scenario.netIncomes[i] || '0';
      csvContent += `${year},${scenario.name},${tspBalance},${netIncome}\n`;
    });
  }
  
  // Download CSV
  const blob = new Blob([csvContent], { type: 'text/csv' });
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = 'retirement_analysis_data.csv';
  link.click();
  window.URL.revokeObjectURL(url);
}

// Mobile optimization
function checkMobile() {
  if (window.innerWidth <= 768) {
    document.body.classList.add('mobile');
  } else {
    document.body.classList.remove('mobile');
  }
}

// Initialize mobile check
checkMobile();
window.addEventListener('resize', checkMobile);
</script>
</body>
</html>
